{"version":3,"sources":["TodoItems.js","TodoList.js","serviceWorker.js","index.js"],"names":["TodoItems","props","createTasks","bind","item","onClick","delete","key","text","console","log","this","listItems","entries","map","className","duration","easing","Component","TodoList","state","items","additem","deleteitem","e","_inputElement","value","newItem","Date","now","setState","prevstate","concat","preventDefault","filteredItems","filter","onSubmit","ref","a","placeholder","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","destination","document","querySelector","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12e6a8c9.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\nimport Flipmove from \"react-flip-move\";\n\n\nclass TodoItems extends Component {\n\tconstructor(props){\n         super(props);\n\n\n        this.createTasks=this.createTasks.bind(this);\n    }\n\n\n\n    createTasks(item) {\n\t\treturn  <li onClick={() => this.delete(item.key)}\n                     key={item.key} > {item.text} </li>\n        \n    }\n\n\n    delete(key) {\n        console.log(\"key \"+ key);\n        this.props.delete(key); \n    }    \n \n\t\n    \n    render() {\n    \tvar todoEntries =this.props.entries;\n    \tvar listItems=todoEntries.map(this.createTasks);\n\n\n    \treturn (\n    \t <ul className=\"theList\">\n         <Flipmove duration={250} easing=\"ease-out\">\n    \t \t{listItems}\n         </Flipmove>\n    \t </ul>\t\n\n\t\t);\n    }\n\n}\n\nexport default TodoItems;","import React,{ Component } from \"react\";\nimport TodoItems from \"./TodoItems\";\nimport \"./TodoList.css\";\n\nclass TodoList extends Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\n\t\tthis.state = {\n\t\t\titems: []\n\t\t};\n\n\t\tthis.additem =this.additem.bind(this);\n\t\tthis.deleteitem=this.deleteitem.bind(this);\n\n\t}\n\n\n\tadditem(e) { \n\t\tif(this._inputElement.value!==\"\") {\n\t\t  \tvar newItem ={\n\t\t  \t\ttext:this._inputElement.value,\n\t\t  \t\tkey: Date.now()\n\t\t  \t};\n\t\t\tthis.setState((prevstate) => {\n\t\t  \t\treturn {\n\t\t  \t\t\titems: prevstate.items.concat(newItem)\n\t\t  \t\t};\t\n\t\t\t}); \t\n\n\t\t}\n\n\t\tthis._inputElement.value=\"\";\n\n\t\tconsole.log(this.state.items);\n\n\t\te.preventDefault();\n \t}\n\n \tdeleteitem(key) {\n \t\tconsole.log(\"delkey \"+ key);\n\n \t\tvar filteredItems=this.state.items.filter(function (item){\n \t\t\treturn(item.key !== key)\n \t\n\n \t\t});\n\n \t\tthis.setState({\n \t\t\titems: filteredItems\n \t\t});\n\n \t}\t\n \t\t\t\n\n\n\n\trender(){\n\t\treturn(\n\t\t  <div className=\"TodoListMain\">\n\t\t    \t<div className=\"header\">\n\t\t     \t\t<form onSubmit={this.additem}>\n\t\t  \t  \t\t\t<input ref={(a) => this._inputElement =a }\n\t\t  \t  \t\t\t\tplaceholder=\"enter task\">\n\t\t  \t  \t\t\t</input>\n\t\t  \t \t    \t<button type=\"submit\"> add </button>\t\n\t\t      \t\t</form>\n\t\t    \t</div>\t\n\t\t    \t<TodoItems entries={this.state.items}\n\t\t\t\t\t\t   delete={this.deleteitem}/>\n\n\t\t  </div>\n\t\t\t\n\t\t);\n\t}\n}\n\nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport\tTodoList from \"./TodoList\";\nimport * as serviceWorker from './serviceWorker';\n\nvar destination=document.querySelector(\"#root\");\n\nReactDOM.render(\n\t<div>\n\t\t<TodoList/>\n\t</div>,\n\tdestination\t\n\t);\n\n\n\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}